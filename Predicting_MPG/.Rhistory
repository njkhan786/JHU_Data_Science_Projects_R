new <- data.frame(x = c(3.21, 2, 3,4))
predict(fit, new, interval ="prediction")
summary(fit)
x0 <- y*0.
x0
x0 <- y*0.+1.
x0
fitintercept <- lm(y~x0-1)
summary(fitintercept)
0.7528/0.9198
sum((y - mean(y))**2.)
?par()
1100.+75.*1.645
1100.+7.5*1.645
5.*(0.5)**5.
6.*(0.5)**5.
ppois(10, 15)
ppois(15,15)
library(datasets); data(ChickWeight); library(reshape2)
head(ChickWeight)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
head(wideCW)
wideCW <- mutate(wideCW,
gain = 21-0
)
library(dplyr)
install.packages('dplyr')
library(dplyr)
wideCW <- mutate(wideCW,
gain = 21-0
)
head(wideCW)
wideCW <- mutate(wideCW,
gain = "21"-"0"
)
data(mtcars)
head(mtcars)
t.test(mtcars$mpg)
?qt
qt(0.95, 8)
1100. +c(-1,1)*qt(0.95, 8)*30/3
1100. +c(-1,1)*qt(0.975, 8)*30/3
6./qt(0.975, 8)
qt(0.975, 8)/3.
ss <- (0.6*9 + 0.68*9)/18.
ss <- ss**0.5
ss
ss <- (0.6*9. + 0.68*9.)/18.
ss <- ss**0.5
ss
2.+c(-1,1)*qt(0.975, 18)*(0.2)**0.5*ss
?tn
?pn
?pnorm
pnorm(0.975)
2.+c(-1,1)*qnorm(0.975)*(0.5/100.+2./100.)**0.5
ss <- (1.5+1.8)/2.
ss <- ss**0.5
-4 + c(-1,1)*ss*(2./9.)**0.5*qt(0.975, 16)
-4 + c(-1,1)*ss*(2./9.)**0.5*qt(0.95, 16)
-4 + c(-1,1)*ss*(2./9.)**0.5*qnorm(0.95)
ss <- (1.5+1.8)/2.
ss <- ss**0.5
-4 + c(-1,1)*ss*(2./9.)**0.5*qnorm(0.95)
ss <- (1.5+1.8)/2.
ss <- ss**0.5
-4 + c(-1,1)*ss*(2./9.)**0.5*qt(0.95, 16)
ss <- (1.5**2.+1.8**2.)/2.
ss <- ss**0.5
-4 + c(-1,1)*ss*(2./9.)**0.5*qt(0.95, 16)
?power.t.test
power.t.test(delta=0.01, sd =0.04, power = 0.9, alternative ="one.sided")$n
power.t.test(delta=0.01, sd =0.04, power = 0.9)$n
power.t.test(delta=0.01, sd =0.04, power = 0.9, sig.level = 0.05)$n
power.t.test(delta=0.01, sd =0.04, power = 0.9, sig.level = 0.05, alternative ="one.sided")$n
power.t.test(delta=0.01, sd =0.04, n=100, sig.level = 0.05, alternative ="one.sided")$power
?t.test
x <- c(140,138,150,148,135)
y <-c(132, 135, 151, 146, 130)
t.test(x,y, alternative=two.sided, paired=TRUE)
t.test(x,y, alternative="two.sided", paired=TRUE)
?qt
qt(0.975,8)
1100.+c(-1,1)*qt(0.975,8)*30./3.
0.5**4*(4.+1)
lam = 1./100.*1787.
lam
?ppois
ppois(10, lam,lower.tail=FALSE)
ppois(10, lam)
?t.test
sig <- qt(0.975,16)*(2./9.)**0.5*(sd0**2./2. +sd1**2./2.)**0.5
mu0 = -3
sd0 = 1.5
mu1 = 1
sd1=1.8
diff = mu1-mu0
sig <- qt(0.975,16)*(2./9.)**0.5*(sd0**2./2. +sd1**2./2.)**0.5
sig
diff
diff/sig
sig2 <- qt(0.995,16)*(2./9.)**0.5*(sd0**2./2. +sd1**2./2.)**0.5
diff/sig2
power.t.test(delta=0.01, sd =0.04, n=100, sig.level = 0.05, alternative ="one.sided")$power
power.t.test(delta=0.01, sd =0.004, n=100, sig.level = 0.05, alternative ="one.sided")$power
?power.t.test
power.t.test(delta=0.01, sd =0.04, power = 0.9, sig.level = 0.05, alternative ="one.sided")
power.t.test(delta=0.01, sd =0.04, n=100, sig.level = 0.05, alternative ="one.sided")$power
power.t.test(delta=0.01, sd =0.04, n=100, sig.level = 0.05, alternative ="one.sided")
power.t.test(delta=0.01, sd =0.04, n=100, sig.level = 0.05,type="one.sample", alternative ="one.sided")$power
power.t.test(delta=0.01, sd =0.04, power = 0.9, sig.level = 0.05, type="one.sample", alternative ="one.sided")$n
library(splines)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
varnames <- names(training)
loc <- grep("^IL", varnames)
smalldata <- training[,loc]
smalldata$diagnosis <- training$diagnosis
modFit1 <- train(diagnosis~., data=smalldata, method = "glm")
pred <- predict(modFit1, testing)
table(pred, testing$diagnosis)
(2.+51.)/(2.+51.+20.+9.)
?train
modFit2 <- train(diagnosis~., data=smalldata, method = "glm",preProcess="pca")
pred2 <- predict(modFit2, testing)
table(pred2, testing$diagnosis)
(3.+55.)/(3.+55.+19.+5.)
setwd("~/MOOC/Data_Science_JHU/JHU_Data_Science_Projects_R/Predicting_MPG")
library(slidify)
author('Predict_MPG')
setwd("~/MOOC/Data_Science_JHU/JHU_Data_Science_Projects_R/Predicting_MPG")
runApp()
library(shiny)
runApp()
runApp()
runApp()
setwd("~/MOOC/Data_Science_JHU/Developing_Data_Products/Example/ShinyApp_1")
runApp()
setwd("~/MOOC/Data_Science_JHU/JHU_Data_Science_Projects_R/Predicting_MPG")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(datasets)
data(mtcars)
if (input$am == 'Manu') data<-mtcars[mtcars$am == 0,]
else data<-mtcars[mtcars$am == 1,]
aa = 'Manu'
if (aa == 'Manu') data<-mtcars[mtcars$am == 0,]
else data<-mtcars[mtcars$am == 1,]
if (aa == 'Manu') data<-mtcars[mtcars$am == 0,]
else data<-mtcars[mtcars$am == 1,]
if (aa == 'Manu') {
data<-mtcars[mtcars$am == 0,]
} else{
data<-mtcars[mtcars$am == 1,]
}
data
runApp()
library(ggplot2)
ggplot(data, aes(x=wt, y=mpg) +
geom_smooth(method = lm))
library(datasets)
data(mtcars)
aa = 'Manu'
if (aa == 'Manu') {
data<-mtcars[mtcars$am == 0,]
} else{
data<-mtcars[mtcars$am == 1,]
}
ggplot(data, aes(x=wt, y=mpg) +
geom_smooth(method = lm))
data
ggplot(data, aes(wt, mpg) +
geom_smooth(method = lm))
ggplot(data, aes(wt, mpg) +
geom_point() +
geom_smooth(method = lm))
data$wt
data$mpg
summary(data)
str(data)
ggplot(data, aes(wt, mpg)) +
geom_point() +
geom_smooth(method = lm)
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm)
runApp()
runApp()
runApp()
runApp()
library(datasets)
data(mtcars)
aa = 'Manu'
if (aa == 'Manu') {
data<-mtcars[mtcars$am == 0,]
fit <- lm(data$mpg~ data$wt)
} else{
data<-mtcars[mtcars$am == 1,]
fit <- lm(data$mpg~ data$wt)
}
pred$wt <- 3
pred$mpg <- predict(fit, pred$wt)
pred$wt <- c(3)
pred$wt <- data.frame(c(3))
pred <- data.frame()
pred$wt <- c(3)
runApp()
runApp()
wt <- c(3)
pred <- data.frame(wt)
pred$wt
wt <- c(3)
pred <- data.frame(wt)
pred$mpg <- predict(fit, pred$wt)
predict(fit, pred$wt)
pred$wt
fit <- lm(data$mpg~ data$wt)
predict(fit, pred$wt)
p <- predict(fit, pred)
fit <- lm(mpg~ wt, data = data)
wt <- c(3)
pred <- data.frame(wt)
p <- predict(fit, pred)
p
wt <- c(3)
pred <- data.frame(wt)
pred$mpg <- predict(fit, pred)
pred
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm) ) +
geom_point(data = pred, aes(wt, mpt, colour =2))
aa = 'Manu'
if (aa == 'Manu') {
data<-mtcars[mtcars$am == 0,]
fit <- lm(data$mpg~ data$wt)
} else{
data<-mtcars[mtcars$am == 1,]
fit <- lm(mpg~ wt, data = data)
}
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm) )
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm)  +
geom_point(data = pred, aes(wt, mpt, colour =2))
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm)  +
geom_point(data = pred, aes(wt, mpg, colour =2))
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm)  +
geom_point(data = pred, aes(wt, mpg, colour =3, size =7))
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm)  +
geom_point(data = pred, aes(wt, mpg, shape =2, colour =3, size =7))
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm)  +
geom_point(data = pred, aes(wt, mpg, shape =a, colour =3, size =7))
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm)  +
geom_point(data = pred, aes(wt, mpg, shape =a, colour =3), size =7)
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm)  +
geom_point(data = pred, aes(wt, mpg, shape =1, colour =3), size =7)
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm)  +
geom_point(data = pred, aes(wt, mpg, shape =1, colour =1, size =15))
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm)  +
geom_point(data = pred, aes(wt, mpg, colour =1, size =15))
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm)  +
geom_point(data = pred, aes(wt, mpg), colour =1, size =15)
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm)  +
geom_point(data = pred, aes(wt, mpg), colour =2, size =15)
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm)  +
geom_point(data = pred, aes(wt, mpg), colour =2, size =10)
as.char(pred$mpg)
as.character(pred$mpg)
as.character(format(pred$mpg, digits =4))
as.character(format(pred$mpg, digits =3))
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm)  +
geom_point(data = pred, aes(wt, mpg), colour =2, size =10) +
geom_text(x = pred$wt, y=pred$mpg, label = 'Predicted MPG is') +
geom_text(x = pred$wt, y=pred$mpg-1, label = as.character(format(pred$mpg, digits =3)))
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm)  +
geom_point(data = pred, aes(wt, mpg), colour =2, size =10) +
geom_text(x = pred$wt+2, y=pred$mpg, label = 'Predicted MPG is') +
geom_text(x = pred$wt+2, y=pred$mpg-1, label = as.character(format(pred$mpg, digits =3)))
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm)  +
geom_point(data = pred, aes(wt, mpg), colour =2, size =10) +
geom_text(x = pred$wt+0.5, y=pred$mpg, label = 'Predicted MPG is') +
geom_text(x = pred$wt+0.5, y=pred$mpg-1, label = as.character(format(pred$mpg, digits =3)))
ggplot(data, aes(wt, mpg)) +
geom_smooth(method = lm)  +
geom_point(data = pred, aes(wt, mpg), colour =2, size =10) +
geom_text(x = pred$wt+0.5, y=pred$mpg, label = 'Predicted MPG is') +
geom_text(x = pred$wt+0.5, y=pred$mpg-2, label = as.character(format(pred$mpg, digits =3)))
runApp()
runApp()
library('devtools')
install_github('rstudio/shinyapps')
library('shinyapps')
shinyapps::setAccountInfo(name='emmayu', token='38726B16D590C1C6FEC44C0CACEEEB09', secret='MU+nmxddGisVhflIZr4RsMJApOvwm8KO5VlDr7FK')
setwd("~/MOOC/Data_Science_JHU/JHU_Data_Science_Projects_R/Predicting_MPG")
deployApp()
lambda = 0.2
mns = NULL
n = 40 # an average of 40 samples each time
iter = 1000  # a thousand simulations get a decent distribution
samples <- matrix(rexp(n*iter, lambda), iter, n)
means <- apply(samples, 1, mean)
str(samples)
str(means)
head(means)
means.type
type(means)
x <- seq(0, 60, length =1000)
expx <- dexp(x)
hist(samples)
lines(x, y, lwd =2, col=2)
hist(samples)
lines(x, expx, lwd =2, col=2)
dexp?
s
?dexp
x <- seq(0, 60, length =1000)
expx <- dexp(x, rate =0.2)
hist(samples)
lines(x, expx, lwd =2, col=2)
x <- seq(0, 60, length =1000)
expx <- dexp(x, rate = lambda)
expx
x <- seq(0, 60, length =1000)
expx <- dexp(x, rate = lambda)
hist(samples)
lines(x, expx*4e4, lwd =2, col=2)
hist(samples, breaks =20)
lines(x, expx*4e4, lwd =2, col=2)
hist(samples, breaks =50)
lines(x, expx*4e4, lwd =2, col=2)
hist(means)
mean(means)
hist(means, breaks =50)
yhist<- seq(0, 250, length =200)
lines(mean(means), yhist, lwd =2, col=2)
# where it's suppose to be. mean. variance, approximately normal.
hist(means, breaks =30)
xhist <-  seq(0, 120, length =200)*0 + mean(means)
yhist<- seq(0, 120, length =200)
lines(xhist, yhist, lwd =2, col=2)
hist(means, breaks =30)
xhist <-  seq(0, 120, length =200)*0 + mean(means)
yhist<- seq(0, 120, length =200)
lines(xhist, yhist, lwd =4, col=2)
x <- seq(0, 60, length =1000)
expx <- dexp(x, rate = lambda)
mean(x)
lambda = 0.2
mns = NULL
n = 40 # an average of 40 samples each time
iter = 1000  # a thousand simulations get a decent distribution
samples <- matrix(rexp(n*iter, lambda), iter, n)
means <- apply(samples, 1, mean)
mean(samples)
x <- seq(0, 60, length =1000)
expx <- dexp(x, rate = lambda)
hist(samples, breaks =50)
# theoritical distribution
lines(x, expx*4e4, lwd =2, col=2)
xsampm <-  seq(0, 6000, length =200)*0 + mean(samples)
xexpom <-  seq(0, 6000, length =200)*0 + 5.
ysampm<- seq(0, 6000, length =200)
lines(xsampm, ysampm, lwd =4, col=1)
lines(xexpom, ysampm, lwd =4, col=2)
5./(40)**0.5
hist(means, breaks =30)
xhist <-  seq(0, 120, length =200)*0 + mean(means)
yhist<- seq(0, 120, length =200)
lines(xhist, yhist, lwd =4, col=1)
?dnorm
hist(means, breaks =30)
# over plot the sample mean
xhist <-  seq(0, 120, length =200)*0 + mean(means)
yhist<- seq(0, 120, length =200)
lines(xhist, yhist, lwd =4, col=1)
# over plot the theoritical Gaussian
xnorm <- seq(0, 10, length =200)
ynorm <- dnorm(x, mean =5, sd = 0.79)
lines(xnorm, ynorm, col=2)
xnorm <- seq(0, 10, length =200)
ynorm <- dnorm(xnorm, mean =5, sd = 0.79)
lines(xnorm, ynorm, col=2)
lines(xnorm, ynorm*1000, col=2)
hist(means, breaks =30)
# over plot the sample mean
xhist <-  seq(0, 120, length =200)*0 + mean(means)
yhist<- seq(0, 120, length =200)
lines(xhist, yhist, lwd =4, col=1)
# over plot the theoritical Gaussian
xnorm <- seq(0, 10, length =200)
ynorm <- dnorm(xnorm, mean =5, sd = 0.79)
lines(xnorm, ynorm*40, col=2)
hist(means, breaks =50)
# over plot the sample mean
xhist <-  seq(0, 120, length =200)*0 + mean(means)
yhist<- seq(0, 120, length =200)
lines(xhist, yhist, lwd =4, col=1)
# over plot the theoritical Gaussian
xnorm <- seq(0, 10, length =200)
ynorm <- dnorm(xnorm, mean =5, sd = 0.79)
lines(xnorm, ynorm*40, col=2)
hist(means, breaks =100)
# over plot the sample mean
xhist <-  seq(0, 120, length =200)*0 + mean(means)
yhist<- seq(0, 120, length =200)
lines(xhist, yhist, lwd =4, col=1)
# over plot the theoritical Gaussian
xnorm <- seq(0, 10, length =200)
ynorm <- dnorm(xnorm, mean =5, sd = 0.79)
lines(xnorm, ynorm*40, col=2)
hist(means, breaks =120)
# over plot the sample mean
xhist <-  seq(0, 120, length =200)*0 + mean(means)
yhist<- seq(0, 120, length =200)
lines(xhist, yhist, lwd =4, col=1)
# over plot the theoritical Gaussian
xnorm <- seq(0, 10, length =200)
ynorm <- dnorm(xnorm, mean =5, sd = 0.79)
lines(xnorm, ynorm*40, col=2)
hist(means, breaks =200)
# over plot the sample mean
xhist <-  seq(0, 120, length =200)*0 + mean(means)
yhist<- seq(0, 120, length =200)
lines(xhist, yhist, lwd =4, col=1)
# over plot the theoritical Gaussian
xnorm <- seq(0, 10, length =200)
ynorm <- dnorm(xnorm, mean =5, sd = 0.79)
lines(xnorm, ynorm*40, col=2)
hist(means, breaks =150)
# over plot the sample mean
xhist <-  seq(0, 120, length =200)*0 + mean(means)
yhist<- seq(0, 120, length =200)
lines(xhist, yhist, lwd =4, col=1)
# over plot the theoritical Gaussian
xnorm <- seq(0, 10, length =200)
ynorm <- dnorm(xnorm, mean =5, sd = 0.79)
lines(xnorm, ynorm*40, col=2)
hist(means, breaks =160)
# over plot the sample mean
xhist <-  seq(0, 120, length =200)*0 + mean(means)
yhist<- seq(0, 120, length =200)
lines(xhist, yhist, lwd =4, col=1)
# over plot the theoritical Gaussian
xnorm <- seq(0, 10, length =200)
ynorm <- dnorm(xnorm, mean =5, sd = 0.79)
lines(xnorm, ynorm*40, col=2)
hist(means, breaks =160)
# over plot the sample mean
xhist <-  seq(0, 120, length =200)*0 + mean(means)
yhist<- seq(0, 120, length =200)
lines(xhist, yhist, lwd =4, col=1)
# over plot the theoritical Gaussian
xnorm <- seq(0, 10, length =200)
ynorm <- dnorm(xnorm, mean =5, sd = 0.79)
lines(xnorm, ynorm*1000, col=2)
hist(means, breaks =100)
# over plot the sample mean
xhist <-  seq(0, 120, length =200)*0 + mean(means)
yhist<- seq(0, 120, length =200)
lines(xhist, yhist, lwd =4, col=1)
# over plot the theoritical Gaussian
xnorm <- seq(0, 10, length =200)
ynorm <- dnorm(xnorm, mean =5, sd = 0.79)
lines(xnorm, ynorm*10, col=2)
hist(means, breaks =100)
# over plot the sample mean
xhist <-  seq(0, 120, length =200)*0 + mean(means)
yhist<- seq(0, 120, length =200)
lines(xhist, yhist, lwd =4, col=1)
# over plot the theoritical Gaussian
xnorm <- seq(0, 10, length =200)
ynorm <- dnorm(xnorm, mean =5, sd = 0.79)
lines(xnorm, ynorm*40, col=2)
hist(means, breaks =100)
# over plot the sample mean
xhist <-  seq(0, 120, length =200)*0 + mean(means)
yhist<- seq(0, 120, length =200)
lines(xhist, yhist, lwd =4, col=1)
# over plot the theoritical Gaussian
xnorm <- seq(0, 10, length =200)
ynorm <- dnorm(xnorm, mean =5, sd = 0.79)
lines(xnorm, ynorm*50, col=2)
?mtcars
setwd("~/MOOC/Data_Science_JHU/JHU_Data_Science_Projects_R/Predicting_MPG")
runApp()
library(shiny)
runApp()
runApp()
